__author__ = "Cody Wild"

"""
Reads data and trains sklearn Random Forest on combined feature file containing: 
1. Bytes Frequencies
2. Hyperfeatures
3. ASM Significance Vectors
4. ASM _idata Word2VecVectors 
5. ASM _text Word2VecVectors
"""



from mlPackage import *
import pandas as pd
import pickle
import csv
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC, LinearSVC
from sklearn import cross_validation
from sklearn.metrics import log_loss
from sklearn.cross_validation import KFold

# def vectorLogLoss(true, predicted_proba):
#     for i in len(true):


def getTrainData(specificPath='w2vBytesSigHyper_TRAIN3.csv'):
    path = '/Users/codywild/Desktop/MSAN/Module3/AdvancedML/KaggleMicrosoftMalware/data/'
    trainDF = pd.read_csv(path + specificPath)
    #return trainDF.columns.values
    trainDF.fillna(0, inplace=True)
    trainDict = transform_csv(trainDF, target_col="class", ignore_cols=['file'])
    return trainDict



def getTestData(specificPath='w2vBytesSigHyper_TEST3.csv'):
    path = '/Users/codywild/Desktop/MSAN/Module3/AdvancedML/KaggleMicrosoftMalware/data/'
    testDF = pd.read_csv(path + specificPath)
    #return testDF.columns.values
    testDF.fillna(0, inplace=True)
    testDict = transform_csv(testDF, target_col='file')
    return testDict

#0_x

if __name__ == "__main__":
    # trainNames = set(getTrainData())
    # testNames = set(getTestData())
    # print trainNames.difference(testNames)
    # print testNames.difference(trainNames)

    trainDict = getTrainData()
    testDict = getTestData()
    train_y = np.asarray(trainDict['target']).ravel()
    train_X = np.asarray(trainDict['data'])
    test_X = np.asarray(testDict['data'])
    filenames_Y = np.asarray(testDict['target'])
    # #kf = KFold(len(X), n_folds=5, shuffle=True)
    model = RandomForestClassifier(n_estimators=100, n_jobs=2)
    # #model = LinearSVC()
    # print model
    # # for train, test in kf:
    # #     print "Fitting model"
    # #     mod = model.fit(X[train], y[train])
    # #     print "Predicting"
    # #     pred = model.predict_proba(X[test])
    # #     #print pred[0:4]
    # #     # exit(0)
    # #     # print len(pred)
    # #     # print sum(pred == y[test])
    # #     # print set(pred)
    # #     # print set(y[test])
    # #     print "Log Loss: "
    # #     print log_loss(y[test], pred)
    #
    # print "Fitting"
    model.fit(train_X, train_y)
    mfile = open('rf100-model', 'r')
    # pickle.dump(model, mfile)
    #model = pickle.load(mfile)
    print "Predicting"
    predictions = model.predict_proba(test_X)

    with open("rFor100.csv", "wb") as f:
        writer = csv.writer(f)
        writer.writerow(['Id', 'Prediction1', 'Prediction2', 'Prediction3', 'Prediction4','Prediction5','Prediction6', 'Prediction7', 'Prediction8', 'Prediction9'])
        for i in range(len(predictions)):
            print i
            fileName = list([filenames_Y[i]][0])
            if len(str(fileName[0])) < 4:
                print filenames_Y[i]
                exit(0)
            filePredictions = list(predictions[i])
            out = fileName + filePredictions
            print out
            writer.writerow(out)
    #fit-transform
    #create c cross-val object
    #
    #


    #testDict = getTestData()
