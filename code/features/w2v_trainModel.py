__author__ = "Cody Wild"

"""
Uses gensim and the output of the sentence-sampler (which returns a sequential list containing sequential lists of tokens)
to train a semantic vector model
"""

from gensim.models.word2vec import Word2Vec
import logging
from ast import literal_eval


def sentenceLines(filename):
    output = []
    with open(filename,'rb') as f:
        for line in f:
            output.append(literal_eval(line))
    return output

if __name__ == "__main__":
    #/Users/codywild/Desktop/MSAN/Module3/AdvancedML/KaggleMicrosoftMalware/data/textSentencesAll.txt
    fileName = "/Users/codywild/Desktop/MSAN/Module3/AdvancedML/KaggleMicrosoftMalware/data/w2v/text/2p0/stemmedSentenceText.txt"
    logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)

    model = Word2Vec(min_count=100, workers=2)
    model2 = Word2Vec(min_count=100, workers=2)
    lines = sentenceLines(fileName)
    model.build_vocab(lines)
    model.train(lines)
    #sentences2 = sentenceIterator('/mnt/malware/word2vecPoint1.txt')