__author__ = "Cody Wild"

"""
This code takes a creates a vector of 9 class significance values for each word seen in the training set _text section, and outputs a document 
mapping each word to that 9-way vector. 
"""

import pandas as pd
import numpy as np

def tfidfCalc(col):
    allFreq = np.sum(col)
    return col/allFreq

if __name__ == "__main__":
    labels = pd.read_csv("/Users/codywild/Desktop/MSAN/Module3/AdvancedML/KaggleMicrosoftMalware/data/trainLabels.csv")
    sumsFound = False
    #runningSums = pd.read_csv('runningSums.csv')
    for i in range(0, 21):
        print i
        """
        Reads through all twenty files outputted by simple ASM parser, groups and sums them into classwise frequencies
        """
        fileName = "/Users/codywild/Desktop/MSAN/Module3/AdvancedML/KaggleMicrosoftMalware/data/simplified/trainSimpleASM-CSV/trainSimpleASM_" + str(i).zfill(2) + ".csv"
        df = pd.read_csv(fileName)
        mergedDF = pd.merge(df, labels, how="left", left_on='fileName', right_on='Id')
        grouped = mergedDF.groupby('Class')
        sums = grouped.aggregate(np.sum).reset_index()

        if not sumsFound:
            runningSums = sums
            sumsFound = True
        else:
            runningSums = pd.concat([runningSums, sums]).groupby('Class').aggregate(np.sum).reset_index()

    print "loaded"
    runningSums = runningSums.set_index('Class')
    runningSums.to_csv('runningSums.csv')
    """
    Normalizes classwise frequencies by frequency within class and within token. This left me with a CSV that maps a token to a vector with significance values
    for each of the nine classes
    """
    tfidfRowSums = runningSums.apply(tfidfCalc, axis=1)
    print "row sums done"
    tfidfSums = tfidfRowSums.apply(tfidfCalc, axis=0)
    print "col sums done"
    tfidfSums.to_csv('significanceVectors.csv')